name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  LIBNFC_VERSION: "1.8.0"
  LIBFREEFARE_VERSION: "0.4.0"

jobs:
  build-linux-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config autoconf automake libtool
          
          # Install libusb for all builds
          sudo apt-get install -y libusb-1.0-0-dev
          
          # For local (Linux) builds, try to use package manager versions
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            sudo apt-get install -y libnfc-dev libfreefare-dev
            echo "Using package manager versions of libnfc and libfreefare for Linux builds"
          fi
          
          # For Windows builds, install cross-compilation tools
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            sudo apt-get install -y gcc-mingw-w64
          fi
          
          # Ensure pkg-config can find libusb
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      - name: Check if package manager versions are sufficient
        id: check_pkgs
        run: |
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            if dpkg -l | grep -q libnfc-dev && dpkg -l | grep -q libfreefare-dev; then
              echo "USE_PKG_MANAGER=true" >> $GITHUB_OUTPUT
            else
              echo "USE_PKG_MANAGER=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "USE_PKG_MANAGER=false" >> $GITHUB_OUTPUT
          fi

      - name: Build libnfc
        if: steps.check_pkgs.outputs.USE_PKG_MANAGER != 'true'
        run: |
          # Check if pkg-config can find libusb-1.0
          pkg-config --list-all | grep libusb
          pkg-config --cflags --libs libusb-1.0 || echo "Could not find libusb-1.0 with pkg-config"
          
          wget https://github.com/nfc-tools/libnfc/releases/download/libnfc-${{ env.LIBNFC_VERSION }}/libnfc-${{ env.LIBNFC_VERSION }}.tar.bz2
          tar xjf libnfc-${{ env.LIBNFC_VERSION }}.tar.bz2
          cd libnfc-${{ env.LIBNFC_VERSION }}
          autoreconf -vis
          
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            # Configure for cross-compilation to Windows
            ./configure --host=${{ matrix.arch == 'amd64' && 'x86_64-w64-mingw32' || 'aarch64-w64-mingw32' }} --prefix=/usr/${{ matrix.arch == 'amd64' && 'x86_64-w64-mingw32' || 'aarch64-w64-mingw32' }} --with-drivers=acr122_usb,arygon,pn53x_usb LDFLAGS="-L/usr/lib" CPPFLAGS="-I/usr/include/libusb-1.0"
          else
            # Explicitly specify libusb paths
            ./configure --prefix=/usr --sysconfdir=/etc LDFLAGS="-L/usr/lib" CPPFLAGS="-I/usr/include/libusb-1.0"
          fi
          
          make
          sudo make install
          cd ..

      - name: Build libfreefare
        if: steps.check_pkgs.outputs.USE_PKG_MANAGER != 'true'
        run: |
          wget https://github.com/nfc-tools/libfreefare/releases/download/libfreefare-${{ env.LIBFREEFARE_VERSION }}/libfreefare-${{ env.LIBFREEFARE_VERSION }}.tar.bz2
          tar xjf libfreefare-${{ env.LIBFREEFARE_VERSION }}.tar.bz2
          cd libfreefare-${{ env.LIBFREEFARE_VERSION }}
          autoreconf -vis
          
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            # Configure for cross-compilation to Windows
            export PKG_CONFIG_PATH=/usr/${{ matrix.arch == 'amd64' && 'x86_64-w64-mingw32' || 'aarch64-w64-mingw32' }}/lib/pkgconfig
            ./configure --host=${{ matrix.arch == 'amd64' && 'x86_64-w64-mingw32' || 'aarch64-w64-mingw32' }} --prefix=/usr/${{ matrix.arch == 'amd64' && 'x86_64-w64-mingw32' || 'aarch64-w64-mingw32' }}
          else
            # Make sure it can find libnfc
            export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH"
            ./configure --prefix=/usr --sysconfdir=/etc LDFLAGS="-L/usr/lib" CPPFLAGS="-I/usr/include"
          fi
          
          make
          sudo make install
          cd ..

      - name: Set up cross-compilation environment
        run: |
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            # Windows cross-compilation setup
            if [[ "${{ matrix.arch }}" == "amd64" ]]; then
              echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
              echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
              echo "CGO_LDFLAGS=-L/usr/x86_64-w64-mingw32/lib" >> $GITHUB_ENV
              echo "CGO_CFLAGS=-I/usr/x86_64-w64-mingw32/include" >> $GITHUB_ENV
            else
              echo "CC=aarch64-w64-mingw32-gcc" >> $GITHUB_ENV
              echo "CXX=aarch64-w64-mingw32-g++" >> $GITHUB_ENV
              echo "CGO_LDFLAGS=-L/usr/aarch64-w64-mingw32/lib" >> $GITHUB_ENV
              echo "CGO_CFLAGS=-I/usr/aarch64-w64-mingw32/include" >> $GITHUB_ENV
            fi
          else
            # Linux cross-compilation using Zig
            echo "CC=zig cc -target ${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_ENV
            echo "CXX=zig c++ -target ${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_ENV
          fi
          
      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # For Linux builds, print info about installed packages
          if [[ "${{ matrix.os }}" == "linux" && "${{ steps.check_pkgs.outputs.USE_PKG_MANAGER }}" == "true" ]]; then
            echo "Using package manager versions:"
            apt-cache policy libnfc-dev libfreefare-dev
            pkg-config --modversion libnfc || echo "libnfc not found by pkg-config"
            pkg-config --modversion libfreefare || echo "libfreefare not found by pkg-config"
          fi
          
          go build -v -o davi-nfc-agent-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .

      # Add verification step to check if Windows executables were built correctly
      - name: Verify Windows build
        if: matrix.os == 'windows'
        run: |
          ls -la davi-nfc-agent-${{ matrix.os }}-${{ matrix.arch }}.exe
          file davi-nfc-agent-${{ matrix.os }}-${{ matrix.arch }}.exe | grep -i "PE32"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: davi-nfc-agent-${{ matrix.os }}-${{ matrix.arch }}
          path: davi-nfc-agent-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Install Zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install dependencies with Homebrew
        run: |
          brew install pkg-config libusb
          brew install libnfc libfreefare
          echo "Using Homebrew versions of libnfc and libfreefare for macOS builds"
          brew --prefix libnfc
          brew --prefix libfreefare
          
          # Add Homebrew pkg-config paths
          echo "PKG_CONFIG_PATH=$(brew --prefix libusb)/lib/pkgconfig:$(brew --prefix libnfc)/lib/pkgconfig:$(brew --prefix libfreefare)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          
          # Add Homebrew lib path to dynamic linker path
          echo "DYLD_LIBRARY_PATH=$(brew --prefix libusb)/lib:$(brew --prefix libnfc)/lib:$(brew --prefix libfreefare)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Set CGO paths
          echo "CGO_LDFLAGS=-L$(brew --prefix libusb)/lib -L$(brew --prefix libnfc)/lib -L$(brew --prefix libfreefare)/lib" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$(brew --prefix libusb)/include -I$(brew --prefix libnfc)/include -I$(brew --prefix libfreefare)/include" >> $GITHUB_ENV
      
      - name: Set up Zig as C compiler
        run: |
          # Use Zig as the C compiler for cross-compilation
          echo "CC=zig cc -target darwin-${{ matrix.arch }}" >> $GITHUB_ENV
          echo "CXX=zig c++ -target darwin-${{ matrix.arch }}" >> $GITHUB_ENV
          
      - name: Build with Zig
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # Verify pkg-config can find the libraries
          pkg-config --modversion libnfc || echo "libnfc not found by pkg-config"
          pkg-config --modversion libfreefare || echo "libfreefare not found by pkg-config"
          
          # Build using Zig as the C compiler
          go build -v -o davi-nfc-agent-darwin-${{ matrix.arch }} .
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: davi-nfc-agent-darwin-${{ matrix.arch }}
          path: davi-nfc-agent-darwin-${{ matrix.arch }}

  create-release:
    needs: [build-linux-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/davi-nfc-agent-*
          generate_release_notes: true
          tag_name: release-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
